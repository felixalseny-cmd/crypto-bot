require('dotenv').config();
const express = require('express');
const TelegramBot = require('node-telegram-bot-api');
const mongoose = require('mongoose');
const path = require('path');
const cron = require('cron');

const app = express();
const PORT = process.env.PORT || 3000;

// ==================== 🔧 НАСТРОЙКА И ПРОВЕРКИ ====================
console.log('🚀 Starting FXWave Crypto Bot...');

// Проверка обязательных переменных окружения
const requiredEnvVars = ['BOT_TOKEN', 'MONGODB_URI', 'VIP_CHANNEL_ID', 'WALLET_ADDRESS'];
requiredEnvVars.forEach(varName => {
  if (!process.env[varName]) {
    console.error(`❌ Missing environment variable: ${varName}`);
    process.exit(1);
  }
  console.log(`✅ ${varName}: ${varName === 'BOT_TOKEN' ? '***' + process.env[varName].slice(-4) : 'Set'}`);
});

console.log('✅ All environment variables loaded');

// ==================== 🗄️ ПОДКЛЮЧЕНИЕ К MONGODB ====================
console.log('🔗 Connecting to MongoDB...');

const connectDB = async () => {
  try {
    await mongoose.connect(process.env.MONGODB_URI, {
      serverSelectionTimeoutMS: 5000,
      socketTimeoutMS: 45000,
    });
    console.log('✅ Successfully connected to MongoDB');
  } catch (error) {
    console.error('❌ MongoDB connection failed:', error.message);
    console.log('🔄 Retrying connection in 10 seconds...');
    setTimeout(connectDB, 10000);
  }
};

connectDB();

// ==================== 👤 МОДЕЛЬ ПОЛЬЗОВАТЕЛЯ ====================
const userSchema = new mongoose.Schema({
  userId: { type: Number, required: true, unique: true },
  username: String,
  firstName: String,
  subscription: {
    type: String,
    enum: ['none', '1month', '3months'],
    default: 'none'
  },
  expiresAt: Date,
  joinedAt: { type: Date, default: Date.now },
  transactions: [{
    hash: String,
    amount: Number,
    status: { type: String, default: 'pending' },
    timestamp: { type: Date, default: Date.now }
  }],
  pendingPayment: {
    plan: String,
    amount: Number,
    timestamp: Date
  },
  inVipChannel: { type: Boolean, default: false }
});

const User = mongoose.model('User', userSchema);

// ==================== 🤖 ИНИЦИАЛИЗАЦИЯ TELEGRAM БОТА ====================
let bot;

const initializeBot = () => {
  console.log('🤖 Initializing Telegram Bot...');
  bot = new TelegramBot(process.env.BOT_TOKEN, { polling: true });

  bot.getMe().then(botInfo => {
    console.log(`✅ Telegram Bot started: @${botInfo.username}`);
    setupBotHandlers();
  }).catch(err => {
    console.error('❌ Telegram Bot failed:', err);
    setTimeout(initializeBot, 10000);
  });
};

mongoose.connection.on('connected', () => {
  initializeBot();
});

// ==================== 🔄 CRON ДЛЯ АВТОМАТИЧЕСКОГО УДАЛЕНИЯ ====================
console.log('⏰ Starting automatic subscription management...');

const checkExpiredSubscriptions = async () => {
  if (!bot) return;
  
  console.log('🔍 Checking for expired subscriptions...');
  try {
    const expiredUsers = await User.find({
      expiresAt: { $lt: new Date() },
      subscription: { $ne: 'none' }
    });

    for (const user of expiredUsers) {
      try {
        // Удаляем из канала
        if (user.inVipChannel) {
          await bot.banChatMember(process.env.VIP_CHANNEL_ID, user.userId);
          await bot.unbanChatMember(process.env.VIP_CHANNEL_ID, user.userId);
        }

        // Обновляем статус
        user.subscription = 'none';
        user.inVipChannel = false;
        await user.save();

        // Уведомление
        try {
          await bot.sendMessage(user.userId,
            `❌ *Your VIP subscription has expired*\n\nTo continue receiving premium signals, please renew your subscription.`,
            { 
              parse_mode: 'Markdown',
              reply_markup: {
                inline_keyboard: [
                  [{ text: '🔄 Renew Subscription', callback_data: 'back_to_plans' }]
                ]
              }
            }
          );
        } catch (e) {
          console.log(`⚠️ Could not notify user ${user.userId}`);
        }

      } catch (error) {
        console.error(`❌ Error removing user ${user.userId}:`, error);
      }
    }
  } catch (error) {
    console.error('❌ Error in subscription expiration check:', error);
  }
};

const expirationJob = new cron.CronJob('0 */6 * * *', checkExpiredSubscriptions);
expirationJob.start();

// ==================== 🎯 ФУНКЦИИ ДЛЯ РАБОТЫ С VIP КАНАЛОМ ====================

async function addToVipChannel(chatId) {
  if (!bot) return false;
  
  try {
    await bot.addChatMember(process.env.VIP_CHANNEL_ID, chatId);
    await User.findOneAndUpdate({ userId: chatId }, { inVipChannel: true });
    return true;
  } catch (error) {
    if (error.response?.body?.description?.includes('USER_ALREADY_PARTICIPANT')) {
      await User.findOneAndUpdate({ userId: chatId }, { inVipChannel: true });
      return true;
    }
    console.error(`❌ Failed to add ${chatId} to channel:`, error.message);
    return false;
  }
}

// ==================== 💬 ОСНОВНЫЕ ОБРАБОТЧИКИ БОТА ====================

function setupBotHandlers() {
  const sendStartMessage = async (chatId, firstName) => {
    const welcomeMessage = `🚀 *Welcome to FXWave VIP Access, ${firstName}*\\!\\n\\nChoose your subscription plan:`;
    const options = {
      parse_mode: 'MarkdownV2',
      reply_markup: {
        inline_keyboard: [
          [
            { text: '📅 1 Month \\- 24 USDT', callback_data: 'subscribe_1month' },
            { text: '⭐ 3 Months \\- 55 USDT', callback_data: 'subscribe_3months' }
          ],
          [
            { text: 'ℹ️ My Subscription', callback_data: 'my_subscription' },
            { text: '💳 How to Pay', callback_data: 'how_to_pay' }
          ]
        ]
      }
    };
    await bot.sendMessage(chatId, welcomeMessage, options);
  };

  bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id;
    await User.findOneAndUpdate(
      { userId: chatId },
      {
        userId: chatId,
        username: msg.chat.username,
        firstName: msg.chat.first_name
      },
      { upsert: true }
    );
    await sendStartMessage(chatId, msg.chat.first_name);
  });

  bot.on('callback_query', async (callbackQuery) => {
    const message = callbackQuery.message;
    const data = callbackQuery.data;
    const chatId = message.chat.id;

    try {
      if (data.startsWith('subscribe_')) {
        const plan = data.split('_')[1];
        await sendPaymentInstructions(chatId, plan);
      } else if (data === 'my_subscription') {
        await showUserSubscription(chatId);
      } else if (data === 'how_to_pay') {
        await sendHowToPay(chatId);
      } else if (data === 'back_to_plans') {
        await bot.deleteMessage(chatId, message.message_id);
        const user = await User.findOne({ userId: chatId });
        await sendStartMessage(chatId, user?.firstName || 'User');
      }
    } catch (error) {
      console.error('Callback error:', error);
      await bot.sendMessage(chatId, '❌ An error occurred\\. Please try again\\.', { parse_mode: 'MarkdownV2' });
    }
  });

  async function sendPaymentInstructions(chatId, plan) {
    const prices = { '1month': 24, '3months': 55 };
    const amount = prices[plan];
    const walletAddress = process.env.WALLET_ADDRESS;

    const message = `💳 *Payment Instructions for ${plan.toUpperCase()}*\\n\\n` +
      `📍 *Send exactly ${amount} USDT \\(TRC20\\) to:*\\n\\n` +
      `\`\`\`\n${walletAddress}\n\`\`\`\\n\\n` +
      `⚠️ *Important:*\\n` +
      `• Send only USDT \\(TRC20\\)\\n` +
      `• Send exact amount: *${amount} USDT*\\n` +
      `• Network: *TRON \\(TRC20\\)*\\n` +
      `• After payment, forward the transaction hash to this bot\\n\\n` +
      `Once verified, you\\'ll get VIP access automatically\\!`;

    await bot.sendMessage(chatId, message, { 
      parse_mode: 'MarkdownV2',
      reply_markup: {
        inline_keyboard: [
          [{ text: '🔙 Back to Plans', callback_data: 'back_to_plans' }]
        ]
      }
    });

    await User.findOneAndUpdate(
      { userId: chatId },
      { $set: { pendingPayment: { plan, amount, timestamp: new Date() } } }
    );
  }

  async function showUserSubscription(chatId) {
    const user = await User.findOne({ userId: chatId });
    if (!user || user.subscription === 'none') {
      await bot.sendMessage(chatId, 
        `📊 *Your Subscription Status*\\n\\n❌ No active subscription\\nChoose a plan to get VIP access\\!`,
        { 
          parse_mode: 'MarkdownV2',
          reply_markup: {
            inline_keyboard: [
              [{ text: '🎫 View Plans', callback_data: 'back_to_plans' }]
            ]
          }
        }
      );
      return;
    }

    const remainingTime = Math.ceil((user.expiresAt - new Date()) / (1000 * 60 * 60 * 24));
    await bot.sendMessage(chatId,
      `📊 *Your Subscription Status*\\n\\n` +
      `✅ Plan: *${user.subscription.toUpperCase()}*\\n` +
      `⏰ Expires in: *${remainingTime} days*\\n` +
      `📅 Renewal: *${user.expiresAt.toLocaleDateString()}*\\n` +
      `🎯 VIP Access: *${user.inVipChannel ? 'Active' : 'Pending'}*`,
      { 
        parse_mode: 'MarkdownV2',
        reply_markup: {
          inline_keyboard: [
            [{ text: '🔄 Renew Subscription', callback_data: 'back_to_plans' }]
          ]
        }
      }
    );
  }

  async function sendHowToPay(chatId) {
    const message = `💡 *How to Pay with USDT*\\n\\n` +
      `1\\. Open your crypto wallet \\(Trust Wallet, Binance, etc\\.\\)\\n` +
      `2\\. Select USDT and make sure to choose *TRON \\(TRC20\\)* network\\n` +
      `3\\. Send exact amount from the subscription plan\\n` +
      `4\\. Copy the *Transaction Hash \\(TXID\\)* after sending\\n` +
      `5\\. Forward the transaction hash to this bot\\n\\n` +
      `⏳ Verification usually takes 5\\-15 minutes`;

    await bot.sendMessage(chatId, message, { 
      parse_mode: 'MarkdownV2',
      reply_markup: {
        inline_keyboard: [
          [{ text: '🎫 View Subscription Plans', callback_data: 'back_to_plans' }]
        ]
      }
    });
  }

  bot.on('message', async (msg) => {
    if (msg.text && (msg.text.startsWith('/') || !/^[a-fA-F0-9]{64}$/.test(msg.text))) return;
    
    const chatId = msg.chat.id;
    await bot.sendMessage(chatId, 
      `⏳ *Transaction received\\!* Verifying hash: ${msg.text.substring(0, 12)}\\.\\.\\.\\n\\nThis may take a few minutes\\.`,
      { parse_mode: 'MarkdownV2' }
    );
    
    setTimeout(async () => {
      try {
        const user = await User.findOne({ userId: chatId });
        if (user && user.pendingPayment) {
          const { plan } = user.pendingPayment;
          const expiresAt = new Date();
          expiresAt.setMonth(expiresAt.getMonth() + (plan === '1month' ? 1 : 3));
          
          await User.findOneAndUpdate(
            { userId: chatId },
            {
              subscription: plan,
              expiresAt,
              $unset: { pendingPayment: 1 },
              $push: {
                transactions: {
                  hash: msg.text,
                  amount: user.pendingPayment.amount,
                  status: 'completed',
                  timestamp: new Date()
                }
              }
            }
          );

          const added = await addToVipChannel(chatId);
          if (added) {
            await bot.sendMessage(chatId,
              `✅ *Payment Verified\\!*\n\nYour *${plan}* VIP subscription has been activated\\!\n\n🎉 *You have been automatically added to the VIP channel\\!*`,
              { parse_mode: 'MarkdownV2' }
            );
          } else {
            await bot.sendMessage(chatId,
              `✅ *Payment Verified\\!*\n\nYour *${plan}* VIP subscription has been activated\\!\n\n⚠️ *Could not add you to VIP channel\\.* Please contact support\\.`,
              { parse_mode: 'MarkdownV2' }
            );
          }
        }
      } catch (error) {
        console.error('Error activating subscription:', error);
        await bot.sendMessage(chatId, '❌ Error activating subscription\\. Please contact support\\.', { parse_mode: 'MarkdownV2' });
      }
    }, 10000);
  });
}

// ==================== 🌐 WEB ИНТЕРФЕЙС ====================
app.use(express.json());
app.use(express.static('public'));

app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

app.get('/health', (req, res) => {
  const dbStatus = mongoose.connection.readyState === 1 ? 'connected' : 'disconnected';
  res.json({
    status: 'OK',
    database: dbStatus,
    service: 'FXWave Crypto Bot',
    timestamp: new Date().toISOString()
  });
});

// ==================== 🚀 ЗАПУСК СЕРВЕРА ====================
app.listen(PORT, () => {
  console.log(`🚀 Server running on port ${PORT}`);
  console.log('✅ FXWave Crypto Bot is ready!');
});

// ==================== 🔄 ОБРАБОТКА ОШИБОК ====================
process.on('unhandledRejection', (reason) => {
  console.error('❌ Unhandled Rejection:', reason);
});

process.on('uncaughtException', (error) => {
  console.error('❌ Uncaught Exception:', error);
});